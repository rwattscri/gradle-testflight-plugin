buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'release'

// Define custom properties using the project extension.
project.ext {
    groupId = 'com.willowtreeapps.gradle.plugins'
    artifactId = 'gradle-testflight-plugin'
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

// The version value is read from the local gradle.properties file!
// version = do not use this property in the build file

dependencies {
    compile gradleApi()
    groovy localGroovy()

    compile 'org.apache.httpcomponents:httpcore:4.2.1'
    compile 'org.apache.httpcomponents:httpmime:4.2.1'
    compile 'org.apache.httpcomponents:fluent-hc:4.2.1'
    compile 'org.apache.httpcomponents:httpclient-cache:4.2.1'
    compile 'commons-httpclient:commons-httpclient:3.1'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
}

repositories {
    mavenCentral()
}

task makePom << {
    pom {
        project {
            pomConfiguration
        }
    }.writeTo("$buildDir/pom.xml")
}

task bundleSources(type: Jar) {
    description = 'gradle-testflight-plugin source code.'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task bundleDocs(type: Jar) {
    description = 'gradle-testflight-plugin groovy docs.'
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    // The archives task defines the artifacts we want additionally published.
    archives bundleDocs, bundleSources
}

// $ gradle signArchives
signing {
    sign configurations.archives
}

// Optional task to prove the signing plugin did its pgp work.  In this case we are testing against the local repo.
task validateSigned << {
    def artifactsRepoPath = "${localMavenRepo}/${ project.groupId.replace('.', '/')}/${archivesBaseName}/${version}/"
    validateSignedArtifact("${artifactsRepoPath}${archivesBaseName}-${version}.jar.asc")
    validateSignedArtifact("${artifactsRepoPath}${archivesBaseName}-${version}.pom.asc")
    validateSignedArtifact("${artifactsRepoPath}${archivesBaseName}-${version}-sources.jar.asc")
    validateSignedArtifact("${artifactsRepoPath}${archivesBaseName}-${version}-javadoc.jar.asc")
}

def validateSignedArtifact(String artifact) {
    def gpgHome = "$System.env.GPG_HOME"
    def output = project.exec {
        executable = new File(gpgHome, 'gpg')
        args artifact
    }
    assert output.exitValue == 0
}

release {
    // Creates the release tag in github.
    createReleaseTag.dependsOn uploadArchives
}

// Only sign if we are uploading the archive to a repository and it is a release version.
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && isReleaseVersion
    }
}

install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    if (signing.signatory) {
        beforeDeployment {
            signing.signPom(it)
        }
    }
}

// $ gradle assemble signArchives uploadArchives  (no release)
// $ gradle assemble signArchives release

uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: uri('repo'))
//        }
//    }
    repositories.mavenDeployer {
        if (signing.signatory) {
            beforeDeployment { signPom(it) }
        }
        name = 'sonatypeDeployer'

        if (isReleaseVersion) {
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
        } else {
            repository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
        }

        pom.project(pomConfiguration)
    }

//    Practice signing and deploying to the local maven repo.
//    repositories.mavenDeployer {
//        name = 'localRepoDeployer'
//        repository(url: "file://${localMavenRepo}")
//        pom.project(pomConfiguration)
//    }
}

def getPomConfiguration() {
    return {
        modelVersion '4.0.0'
        groupId project.groupId
        artifactId project.artifactId
        version project.version
        packaging 'jar'
        name 'Gradle TestFlight Plugin'
        description 'Use this plugin to publish an Android or iOS mobile application to TestFlight. Create an account at https://testflightapp.com to get started.'
        url 'https://github.com/willowtreeapps/gradle-testflight-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        scm {
            url 'https://github.com/willowtreeapps/gradle-testflight-plugin'
            connection 'scm:git:git@github.com:willowtreeapps/gradle-testflight-plugin.git'
            developerConnection 'scm:git:git@github.com:willowtreeapps/gradle-testflight-plugin.git'
        }
        organization {
            name 'WillowTree Apps, Inc.'
            url 'http://www.willowtreeapps.com/'
        }
        developers {
            developer {
                name 'Andrew Shannon'
                email 'andrew.shannon@willowtreeapps.com'
            }
        }
        issueManagement {
            system 'github'
            url 'https://github.com/willowtreeapps/gradle-testflight-plugin/issues'
        }
        inceptionYear '2013'
    }
}